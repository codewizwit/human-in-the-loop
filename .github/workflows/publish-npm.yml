name: Release and Publish

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type (leave empty to use conventional commits)'
        required: false
        type: choice
        options:
          - ''
          - patch
          - minor
          - major

jobs:
  release:
    runs-on: ubuntu-latest
    environment: production
    permissions:
      contents: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: pnpm/action-setup@v3
        with:
          version: 9

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests (pre-release)
        run: |
          pnpm lint
          pnpm typecheck
          pnpm test

      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Bump version and create tag
        id: version_bump
        run: |
          # Use manual version type if provided, otherwise use conventional commits
          if [ -n "${{ inputs.version_type }}" ]; then
            echo "ðŸ“¦ Manual version bump: ${{ inputs.version_type }}"
            pnpm release --release-as ${{ inputs.version_type }}
          else
            echo "ðŸ“¦ Using conventional commits to determine version"
            pnpm release
          fi

          # Get the new version
          NEW_VERSION=$(cat src/cli/package.json | grep '"version"' | head -1 | awk -F'"' '{print $4}')
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "ðŸ“¦ Version bumped to: $NEW_VERSION"

      - name: Build with new version
        run: pnpm build

      - name: Push version bump and tags
        run: |
          git push --follow-tags origin main

      - name: Publish to npm
        run: cd dist/src/cli && npm publish --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub release
        run: |
          VERSION="${{ steps.version_bump.outputs.version }}"

          # Extract release notes from CHANGELOG.md for this version
          NOTES=$(sed -n "/^### \[$VERSION\]/,/^### \[/p" CHANGELOG.md | sed '$ d' | tail -n +3)

          # Fallback to commit history if CHANGELOG extraction fails
          if [ -z "$NOTES" ]; then
            LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
            NOTES=$([ -z "$LAST_TAG" ] && git log --pretty=format:"- %s (%h)" --no-merges -10 || git log $LAST_TAG..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi

          gh release create "v$VERSION" \
            --title "v$VERSION" \
            --notes "## Release v$VERSION

          $NOTES

          **Install:** \`npm i -g @human-in-the-loop/cli@$VERSION\`"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
