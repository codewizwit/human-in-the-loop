id: e2e-strategy
name: E2E Testing Strategy Generator
version: 1.0.0
description: Generates comprehensive end-to-end testing strategy using Playwright or Cypress, covering critical user flows, test organization, and best practices
category: testing

variables:
  - name: framework
    description: The E2E testing framework (Playwright, Cypress, or other)
    required: true
  - name: app_type
    description: Type of application (Web app, SPA, SSR, Mobile web, PWA, etc.)
    required: true
  - name: critical_flows
    description: List of critical user flows that must be tested
    required: true
  - name: tech_stack
    description: Technology stack and frameworks used (React, Angular, Vue, etc.)
    required: false
  - name: existing_tests
    description: Existing test setup to review or improve (optional)
    required: false

template: |
  You are an expert QA automation engineer specializing in end-to-end testing strategies. Your goal is to create a comprehensive E2E testing plan that ensures quality while maintaining test reliability and speed.

  ## Framework
  {{framework}}

  ## Application Type
  {{app_type}}

  ## Critical User Flows
  {{critical_flows}}

  {{#if tech_stack}}
  ## Technology Stack
  {{tech_stack}}
  {{/if}}

  {{#if existing_tests}}
  ## Existing Test Setup (for review)
  {{existing_tests}}
  {{/if}}

  ## Your Task

  Create a comprehensive E2E testing strategy covering the following areas:

  ### 1. Test Organization & Structure

  **Directory Structure**
  ```
  e2e/
  ├── fixtures/          # Test data and mocks
  ├── pages/             # Page Object Models
  ├── tests/
  │   ├── smoke/         # Critical path tests (run on every deploy)
  │   ├── regression/    # Full test suite
  │   └── visual/        # Visual regression tests
  ├── support/           # Custom commands and utilities
  └── config/            # Environment configurations
  ```

  **Test Organization Principles**
  - Group tests by feature or user journey
  - Keep tests independent and isolated
  - Use descriptive test names (user story format)
  - Tag tests by priority (P0, P1, P2)
  - Separate smoke tests from full regression

  ### 2. Page Object Model (POM) Design

  **Best Practices**
  - One POM per page/component
  - Encapsulate selectors and actions
  - Use semantic selectors (data-testid preferred)
  - Return page objects for method chaining
  - Include wait conditions in actions

  **Example Structure**
  ```typescript
  class LoginPage {
    readonly emailInput = '[data-testid="email-input"]';
    readonly passwordInput = '[data-testid="password-input"]';
    readonly submitButton = '[data-testid="login-submit"]';

    async login(email: string, password: string) {
      await page.fill(this.emailInput, email);
      await page.fill(this.passwordInput, password);
      await page.click(this.submitButton);
      await page.waitForURL('/dashboard');
    }
  }
  ```

  ### 3. Test Data Management

  **Strategies**
  - Use fixtures for static test data
  - Generate dynamic data with libraries (Faker.js)
  - Seed test database before tests
  - Clean up data after tests (or use database rollback)
  - Avoid hardcoded values in tests

  **Data Isolation**
  - Each test should create its own data
  - Don't share data between tests
  - Use unique identifiers (timestamps, UUIDs)
  - Consider data cleanup strategies

  ### 4. Selector Strategy

  **Priority Order**
  1. `data-testid` attributes (most stable)
  2. ARIA labels and roles
  3. Semantic HTML (form labels, buttons)
  4. CSS classes (if stable)
  5. XPath (last resort)

  **Anti-patterns to Avoid**
  - ❌ Dynamic IDs or generated class names
  - ❌ Selecting by text content (i18n issues)
  - ❌ Overly specific selectors (brittle)
  - ❌ Index-based selectors

  ### 5. Wait Strategies

  **Playwright/Cypress Wait Patterns**
  - Auto-waiting for elements (Playwright default)
  - Explicit waits for network requests
  - Wait for animations/transitions
  - Custom wait conditions for dynamic content
  - Avoid fixed `sleep()` calls

  **Network Handling**
  - Wait for specific API calls to complete
  - Intercept and mock API responses when needed
  - Handle slow networks gracefully
  - Test offline scenarios if applicable

  ### 6. Test Reliability & Flakiness Prevention

  **Common Causes of Flaky Tests**
  - Race conditions (async operations)
  - Timing issues (too short waits)
  - Test data conflicts
  - Non-deterministic behavior
  - External dependencies

  **Solutions**
  - Use proper wait conditions
  - Retry failed assertions (with caution)
  - Isolate tests completely
  - Mock external services
  - Run tests in parallel safely

  ### 7. Parallel Execution & Performance

  **Optimization Strategies**
  - Run tests in parallel workers
  - Shard test suite across machines
  - Prioritize critical tests (smoke suite)
  - Use test-level parallelism
  - Share browser context where safe

  **Performance Targets**
  - Smoke suite: < 5 minutes
  - Full regression: < 30 minutes
  - Individual test: < 30 seconds

  ### 8. Continuous Integration Setup

  **CI/CD Integration**
  - Run smoke tests on every PR
  - Full regression on main branch
  - Schedule nightly full runs
  - Fail fast (cancel on first failure)
  - Parallel execution in CI

  **Reporting**
  - HTML reports with screenshots
  - Video recordings of failures
  - Failure trends over time
  - Integration with test management tools
  - Slack/email notifications for failures

  ### 9. Visual Regression Testing

  **When to Use**
  - UI component libraries
  - Critical user-facing pages
  - After CSS changes
  - Cross-browser compatibility

  **Tools & Strategy**
  - Playwright screenshot comparison
  - Percy or similar visual testing platform
  - Define baseline images
  - Set acceptable diff thresholds
  - Review and approve changes

  ### 10. Cross-Browser & Device Testing

  **Browser Coverage**
  - Chrome (primary)
  - Firefox (secondary)
  - Safari (if targeting Mac/iOS)
  - Edge (if enterprise users)

  **Device Testing**
  - Desktop (1920x1080, 1366x768)
  - Tablet (iPad dimensions)
  - Mobile (iPhone, Android)
  - Test responsive breakpoints

  ### 11. Authentication & Session Management

  **Strategies**
  - Reuse authentication state
  - Store session cookies/tokens
  - Use API calls to authenticate (faster)
  - Test login flow separately
  - Handle session expiration

  ### 12. Error Handling & Debugging

  **Debug Tooling**
  - Screenshots on failure
  - Video recordings
  - Browser console logs
  - Network request logs
  - DOM snapshots

  **Failure Recovery**
  - Automatic retries (max 2-3 attempts)
  - Detailed error messages
  - Stack traces with line numbers
  - Link to test run in CI

  ## Output Format

  Provide your E2E testing strategy in this structure:

  **Test Scope & Prioritization:**
  [Which flows to test, priority levels, smoke vs regression]

  **Recommended Directory Structure:**
  [Specific folder organization for this project]

  **Page Object Models:**
  [Key POMs needed with example code]

  **Critical Test Scenarios:**
  [Step-by-step test cases for each critical flow]

  **Selector Strategy:**
  [Specific approach for this tech stack]

  **Data Management Approach:**
  [How to handle test data for this app]

  **CI/CD Pipeline:**
  [Recommended GitHub Actions or similar workflow]

  **Performance Optimizations:**
  [Specific optimizations for test speed]

  **Example Test Code:**
  [1-2 complete example tests]

  **Anti-Patterns to Avoid:**
  [Common mistakes for this stack/framework]

  **Success Metrics:**
  [How to measure test effectiveness]

examples:
  - input:
      framework: Playwright
      app_type: SPA (React)
      critical_flows: |
        1. User registration and email verification
        2. User login (email/password and Google OAuth)
        3. Create new project
        4. Invite team member to project
        5. Upgrade to paid plan
        6. Cancel subscription
      tech_stack: |
        - React 18 with TypeScript
        - React Router for navigation
        - TanStack Query for data fetching
        - Auth0 for authentication
        - Stripe for payments
    output: |
      **Test Scope & Prioritization:**

      **P0 (Smoke - run on every PR):**
      - Login with email/password
      - Create project (happy path)
      - View project dashboard

      **P1 (Regression - run on main branch):**
      - User registration flow
      - Google OAuth login
      - Invite team member
      - Upgrade to paid plan

      **P2 (Extended - nightly runs):**
      - Email verification
      - Password reset
      - Subscription cancellation
      - Edge cases and error scenarios

      **Recommended Directory Structure:**
      ```
      e2e/
      ├── fixtures/
      │   ├── users.json
      │   └── projects.json
      ├── pages/
      │   ├── auth/
      │   │   ├── login.page.ts
      │   │   └── register.page.ts
      │   ├── project/
      │   │   ├── create-project.page.ts
      │   │   └── project-dashboard.page.ts
      │   └── billing/
      │       └── upgrade.page.ts
      ├── tests/
      │   ├── smoke/
      │   │   └── critical-path.spec.ts
      │   ├── auth/
      │   │   ├── registration.spec.ts
      │   │   └── login.spec.ts
      │   ├── projects/
      │   │   ├── create-project.spec.ts
      │   │   └── team-management.spec.ts
      │   └── billing/
      │       └── subscription.spec.ts
      ├── support/
      │   ├── auth-helper.ts
      │   └── test-utils.ts
      └── playwright.config.ts
      ```

      **Page Object Models:**

      ```typescript
      // pages/auth/login.page.ts
      import { Page } from '@playwright/test';

      export class LoginPage {
        constructor(private page: Page) {}

        readonly emailInput = '[data-testid="email-input"]';
        readonly passwordInput = '[data-testid="password-input"]';
        readonly submitButton = '[data-testid="login-submit"]';
        readonly googleButton = '[data-testid="google-oauth"]';
        readonly errorMessage = '[data-testid="error-message"]';

        async goto() {
          await this.page.goto('/login');
          await this.page.waitForLoadState('networkidle');
        }

        async loginWithEmail(email: string, password: string) {
          await this.page.fill(this.emailInput, email);
          await this.page.fill(this.passwordInput, password);
          await this.page.click(this.submitButton);
          await this.page.waitForURL('/dashboard');
        }

        async loginWithGoogle() {
          await this.page.click(this.googleButton);
          // Handle OAuth popup/redirect
          await this.page.waitForURL('/dashboard');
        }

        async getErrorMessage() {
          return await this.page.textContent(this.errorMessage);
        }
      }

      // pages/project/create-project.page.ts
      export class CreateProjectPage {
        constructor(private page: Page) {}

        readonly projectNameInput = '[data-testid="project-name"]';
        readonly projectTypeSelect = '[data-testid="project-type"]';
        readonly createButton = '[data-testid="create-project"]';

        async createProject(name: string, type: string = 'web') {
          await this.page.fill(this.projectNameInput, name);
          await this.page.selectOption(this.projectTypeSelect, type);
          await this.page.click(this.createButton);
          await this.page.waitForResponse(resp =>
            resp.url().includes('/api/projects') && resp.status() === 201
          );
        }
      }
      ```

      **Critical Test Scenarios:**

      ```typescript
      // tests/smoke/critical-path.spec.ts
      import { test, expect } from '@playwright/test';
      import { LoginPage } from '../../pages/auth/login.page';
      import { CreateProjectPage } from '../../pages/project/create-project.page';

      test.describe('Critical Path - Smoke Tests', () => {
        test('User can login and create project', async ({ page }) => {
          const loginPage = new LoginPage(page);
          const createProjectPage = new CreateProjectPage(page);

          // Login
          await loginPage.goto();
          await loginPage.loginWithEmail('test@example.com', 'Password123!');

          // Verify dashboard loaded
          await expect(page).toHaveURL(/.*dashboard/);
          await expect(page.getByRole('heading', { name: 'Dashboard' })).toBeVisible();

          // Create project
          await page.click('[data-testid="new-project-button"]');
          await createProjectPage.createProject(`Test Project ${Date.now()}`);

          // Verify project created
          await expect(page.getByText('Project created successfully')).toBeVisible();
        });
      });

      // tests/auth/registration.spec.ts
      test.describe('User Registration', () => {
        test('New user can register and verify email', async ({ page }) => {
          // Navigate to registration
          await page.goto('/register');

          // Fill registration form
          const timestamp = Date.now();
          await page.fill('[data-testid="email"]', `test+${timestamp}@example.com`);
          await page.fill('[data-testid="password"]', 'SecurePassword123!');
          await page.fill('[data-testid="confirm-password"]', 'SecurePassword123!');
          await page.check('[data-testid="terms-checkbox"]');

          // Submit
          await page.click('[data-testid="register-submit"]');

          // Wait for verification email message
          await expect(page.getByText(/verification email sent/i)).toBeVisible();

          // In real scenario, would:
          // 1. Query test email service for verification link
          // 2. Extract token from email
          // 3. Visit verification URL
          // 4. Confirm account is activated
        });
      });
      ```

      **Selector Strategy:**

      For React apps, add `data-testid` attributes:
      ```tsx
      // Good
      <button data-testid="login-submit">Login</button>
      <input data-testid="email-input" type="email" />

      // Also acceptable (semantic)
      <button aria-label="Login">Login</button>
      ```

      **Avoid:**
      ```tsx
      // Bad - dynamic classes
      <button className="btn-primary-a8f9d">Login</button>

      // Bad - implementation details
      <button id="button-123">Login</button>
      ```

      **Data Management Approach:**

      ```typescript
      // support/auth-helper.ts
      export async function createTestUser() {
        const timestamp = Date.now();
        const user = {
          email: `test+${timestamp}@example.com`,
          password: 'TestPassword123!',
          name: `Test User ${timestamp}`
        };

        // Create via API (faster than UI)
        const response = await fetch(`${process.env.API_URL}/users`, {
          method: 'POST',
          body: JSON.stringify(user)
        });

        return { ...user, id: (await response.json()).id };
      }

      // Reuse auth state across tests
      export async function getAuthState(email: string, password: string) {
        const storageState = `.auth/${email}.json`;

        if (fs.existsSync(storageState)) {
          return storageState;
        }

        // Login once and save state
        const browser = await chromium.launch();
        const page = await browser.newPage();
        await page.goto('/login');
        // ... perform login ...
        await page.context().storageState({ path: storageState });
        await browser.close();

        return storageState;
      }
      ```

      **CI/CD Pipeline:**

      ```yaml
      # .github/workflows/e2e-tests.yml
      name: E2E Tests

      on:
        pull_request:
          branches: [main]
        push:
          branches: [main]
        schedule:
          - cron: '0 2 * * *'  # Nightly at 2 AM

      jobs:
        smoke-tests:
          runs-on: ubuntu-latest
          if: github.event_name == 'pull_request'
          steps:
            - uses: actions/checkout@v3
            - uses: actions/setup-node@v3
              with:
                node-version: '20'
            - run: npm ci
            - run: npx playwright install --with-deps
            - run: npm run test:e2e:smoke
              env:
                BASE_URL: ${{ secrets.STAGING_URL }}
            - uses: actions/upload-artifact@v3
              if: always()
              with:
                name: playwright-report
                path: playwright-report/

        regression-tests:
          runs-on: ubuntu-latest
          if: github.event_name == 'push' || github.event_name == 'schedule'
          strategy:
            matrix:
              browser: [chromium, firefox, webkit]
              shard: [1, 2, 3, 4]
          steps:
            - uses: actions/checkout@v3
            - uses: actions/setup-node@v3
            - run: npm ci
            - run: npx playwright install --with-deps
            - run: npm run test:e2e -- --shard=${{ matrix.shard }}/4 --project=${{ matrix.browser }}
            - uses: actions/upload-artifact@v3
              if: always()
              with:
                name: report-${{ matrix.browser }}-${{ matrix.shard }}
                path: playwright-report/
      ```

      **Performance Optimizations:**

      1. **Reuse Auth State:**
      ```typescript
      // playwright.config.ts
      use: {
        storageState: '.auth/user.json',  // Reuse logged-in state
      }
      ```

      2. **Parallel Execution:**
      ```typescript
      // playwright.config.ts
      workers: process.env.CI ? 4 : 2,
      fullyParallel: true,
      ```

      3. **Selective Testing:**
      ```typescript
      // Only run tests with specific tags
      test.only('Critical path @smoke', async ({ page }) => {
        // Test code
      });
      ```

      4. **Mock External Services:**
      ```typescript
      await page.route('**/api/analytics/**', route => route.abort());
      await page.route('**/api/stripe/**', route => route.fulfill({
        status: 200,
        body: JSON.stringify({ success: true })
      }));
      ```

      **Anti-Patterns to Avoid:**

      ❌ **Testing Implementation Details:**
      ```typescript
      // Bad - testing React internal state
      expect(component.state.isLoading).toBe(false);
      ```

      ❌ **Hardcoded Waits:**
      ```typescript
      // Bad
      await page.waitForTimeout(3000);

      // Good
      await page.waitForResponse(resp => resp.url().includes('/api/data'));
      ```

      ❌ **Shared Test Data:**
      ```typescript
      // Bad - tests interfere with each other
      const testUser = { email: 'test@example.com' };

      // Good - unique data per test
      const testUser = { email: `test+${Date.now()}@example.com` };
      ```

      ❌ **Testing Everything in E2E:**
      ```typescript
      // Bad - unit/integration test concern
      test('validateEmail returns true for valid email', ...);

      // Good - actual user flow
      test('User receives error for invalid email', ...);
      ```

      **Success Metrics:**

      - **Test Coverage:** 100% of critical user flows
      - **Pass Rate:** > 95% on main branch
      - **Flaky Rate:** < 3% of test runs
      - **Execution Time:**
        - Smoke suite: < 5 minutes
        - Full regression: < 30 minutes
      - **Detection Rate:** Catches bugs before production
      - **Maintenance:** < 10% test changes per sprint

metadata:
  author: codewizwit
  license: MIT
  tags:
    - testing
    - e2e
    - playwright
    - cypress
    - automation
    - quality-assurance
  lastUpdated: '2025-10-16'
