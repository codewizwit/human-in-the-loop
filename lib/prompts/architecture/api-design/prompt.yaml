id: api-design
name: API Design Best Practices
version: 1.0.0
description: Provides guidance on REST and GraphQL API design following industry best practices, covering naming conventions, versioning, security, and scalability
category: architecture

variables:
  - name: api_type
    description: The type of API (REST, GraphQL, or both)
    required: true
  - name: endpoints
    description: List of endpoints or operations to design/review
    required: true
  - name: business_requirements
    description: Business context and requirements for the API
    required: false
  - name: existing_design
    description: Existing API design to review (optional)
    required: false

template: |
  You are an expert API architect specializing in REST and GraphQL design. Your goal is to provide comprehensive guidance on API design that follows industry best practices.

  ## API Type
  {{api_type}}

  ## Endpoints/Operations
  {{endpoints}}

  {{#if business_requirements}}
  ## Business Requirements
  {{business_requirements}}
  {{/if}}

  {{#if existing_design}}
  ## Existing Design (for review)
  {{existing_design}}
  {{/if}}

  ## Your Task

  Provide comprehensive API design guidance covering the following areas:

  ### 1. RESTful Principles (if applicable)

  **Resource Naming**
  - Use plural nouns for collections (e.g., `/users`, `/orders`)
  - Use hierarchical structure for relationships (e.g., `/users/{id}/orders`)
  - Avoid verbs in URLs (use HTTP methods instead)
  - Use kebab-case for multi-word resources (e.g., `/purchase-orders`)

  **HTTP Methods**
  - `GET` - Retrieve resource(s), idempotent, cacheable
  - `POST` - Create new resource, not idempotent
  - `PUT` - Update/replace entire resource, idempotent
  - `PATCH` - Partial update, not necessarily idempotent
  - `DELETE` - Remove resource, idempotent

  **Status Codes**
  - `200 OK` - Successful GET, PUT, PATCH
  - `201 Created` - Successful POST with resource creation
  - `204 No Content` - Successful DELETE or update with no response body
  - `400 Bad Request` - Invalid input/validation error
  - `401 Unauthorized` - Authentication required
  - `403 Forbidden` - Authenticated but not authorized
  - `404 Not Found` - Resource doesn't exist
  - `409 Conflict` - Conflict with current state (e.g., duplicate)
  - `422 Unprocessable Entity` - Validation failed
  - `429 Too Many Requests` - Rate limit exceeded
  - `500 Internal Server Error` - Server error

  ### 2. GraphQL Schema Design (if applicable)

  **Schema Organization**
  - Clear type definitions with meaningful names
  - Proper use of scalars, objects, interfaces, unions
  - Nullable vs non-nullable fields (use `!` judiciously)
  - Connection pattern for pagination
  - Input types for mutations

  **Query Design**
  - Descriptive query names (e.g., `getUser`, `searchProducts`)
  - Proper argument types and validation
  - Efficient resolvers (avoid N+1 queries)
  - Field-level authorization

  **Mutation Design**
  - Clear action-based names (e.g., `createOrder`, `updateUserProfile`)
  - Input validation at schema level
  - Meaningful return types (include errors)
  - Optimistic concurrency control

  ### 3. Naming Conventions

  **Consistency**
  - Choose camelCase, snake_case, or kebab-case and stick to it
  - Industry standard: camelCase for JSON/GraphQL, kebab-case for URLs
  - Boolean fields: use `is`, `has`, `can` prefixes (e.g., `isActive`)
  - Dates: ISO 8601 format with timezone
  - IDs: UUIDs or meaningful prefixes (e.g., `usr_`, `ord_`)

  **Clarity**
  - Descriptive names that reveal intent
  - Avoid abbreviations unless universally understood
  - Use domain language (ubiquitous language)

  ### 4. Versioning Strategy

  **Options**
  - URL versioning: `/v1/users`, `/v2/users` (most common)
  - Header versioning: `Accept: application/vnd.api.v1+json`
  - Query parameter: `/users?version=1` (not recommended)

  **Best Practices**
  - Version only when breaking changes occur
  - Deprecation policy (e.g., support N-1 versions)
  - Clear migration guide for version upgrades
  - Sunset headers for deprecated versions

  ### 5. Security Considerations

  **Authentication**
  - Use OAuth 2.0 / OpenID Connect for user auth
  - Use API keys for service-to-service
  - JWT tokens with short expiration
  - Refresh token rotation

  **Authorization**
  - Role-Based Access Control (RBAC) or Attribute-Based (ABAC)
  - Field-level permissions for sensitive data
  - Resource ownership validation

  **Input Validation**
  - Validate all inputs (type, format, range)
  - Sanitize to prevent injection attacks
  - Rate limiting per endpoint and per user
  - Request size limits

  **Security Headers**
  - CORS configuration (restrict origins)
  - Content-Security-Policy
  - X-Frame-Options
  - Strict-Transport-Security (HTTPS only)

  **Rate Limiting**
  - Per-user and per-IP limits
  - Different limits for authenticated vs anonymous
  - Clear rate limit headers (X-RateLimit-*)
  - Graceful degradation with 429 status

  ### 6. Response Design

  **Consistent Structure**
  ```json
  {
    "data": { /* successful response */ },
    "error": { /* error details */ },
    "meta": {
      "timestamp": "2024-01-15T10:30:00Z",
      "requestId": "req_abc123"
    }
  }
  ```

  **Pagination**
  - Cursor-based for real-time data
  - Offset-based for static data
  - Include `total`, `hasNext`, `cursor` in metadata

  **Error Handling**
  ```json
  {
    "error": {
      "code": "VALIDATION_ERROR",
      "message": "Invalid input",
      "details": [
        {
          "field": "email",
          "message": "Invalid email format"
        }
      ]
    }
  }
  ```

  ### 7. Performance & Scalability

  - Implement caching (ETags, Cache-Control)
  - Support compression (gzip, brotli)
  - Provide filtering, sorting, field selection
  - Batch operations where appropriate
  - Async operations for long-running tasks (webhooks/polling)
  - Monitor and optimize slow endpoints

  ### 8. Documentation

  - OpenAPI/Swagger for REST
  - GraphQL schema with descriptions
  - Example requests and responses
  - Error code reference
  - Authentication guide
  - Rate limit information

  ## Output Format

  Provide your API design recommendations in this structure:

  **Endpoint Design:**
  [Specific endpoint designs with URLs/schemas, methods, parameters]

  **Key Improvements:**
  - [Bulleted list of specific improvements or validations]

  **Security Recommendations:**
  - [Auth, rate limiting, validation specifics]

  **Versioning Strategy:**
  [Recommended approach for this API]

  **Sample Request/Response:**
  [Code examples showing proper structure]

  **Red Flags:**
  [Any concerns or potential issues identified]

examples:
  - input:
      api_type: REST
      endpoints: |
        - User registration
        - User login
        - Get user profile
        - Update user profile
        - Delete user account
      business_requirements: |
        Building a user management system for a SaaS application.
        Need to support OAuth and API key authentication.
        Must comply with GDPR (data deletion).
    output: |
      **Endpoint Design:**

      ```
      POST   /v1/users                    # Register new user
      POST   /v1/auth/login               # Authenticate user
      GET    /v1/users/{id}               # Get user profile
      PATCH  /v1/users/{id}               # Update user profile
      DELETE /v1/users/{id}               # Delete user account (GDPR)
      POST   /v1/auth/refresh             # Refresh access token
      POST   /v1/auth/logout              # Revoke tokens
      ```

      **Key Improvements:**
      - Use `PATCH` instead of `PUT` for profile updates (allows partial updates)
      - Separate `/auth` namespace for authentication operations
      - Include token refresh endpoint for security
      - User ID in path, not query parameter
      - Plural resource names (`/users` not `/user`)

      **Security Recommendations:**
      - **Authentication**: JWT access tokens (15 min expiry) + refresh tokens (7 days)
      - **Rate Limiting**:
        - Registration: 3 attempts per IP per hour
        - Login: 5 failed attempts per user per 15 minutes
        - Profile operations: 100 requests per user per minute
      - **Input Validation**:
        - Email: RFC 5322 format validation
        - Password: Min 12 chars, require uppercase, lowercase, number, special char
        - Profile updates: Whitelist allowed fields
      - **GDPR Compliance**:
        - DELETE endpoint performs hard delete + anonymization
        - Audit log retention policy
        - Data export endpoint (not shown but recommended)

      **Versioning Strategy:**
      URL versioning (`/v1/`) - most transparent and easiest to understand.
      Support N-1 versions (v1 and v2 simultaneously) during migration period.

      **Sample Request/Response:**

      ```http
      POST /v1/users
      Content-Type: application/json

      {
        "email": "user@example.com",
        "password": "SecureP@ssw0rd123",
        "firstName": "Jane",
        "lastName": "Doe"
      }

      Response: 201 Created
      {
        "data": {
          "id": "usr_1a2b3c4d",
          "email": "user@example.com",
          "firstName": "Jane",
          "lastName": "Doe",
          "createdAt": "2024-01-15T10:30:00Z",
          "isVerified": false
        },
        "meta": {
          "requestId": "req_abc123"
        }
      }
      ```

      **Red Flags:**
      - ⚠️ Password reset flow not included (highly recommended)
      - ⚠️ Email verification workflow missing
      - ⚠️ Consider multi-factor authentication for sensitive operations
      - ⚠️ Profile updates should log changes for audit trail

  - input:
      api_type: GraphQL
      endpoints: |
        - Query products with filters
        - Get product details
        - Add product to cart
        - Checkout cart
      business_requirements: |
        E-commerce platform with product catalog and shopping cart.
        Need to handle high read traffic, optimize for mobile apps.
      existing_design: |
        type Query {
          products: [Product]
          product(id: ID): Product
        }

        type Mutation {
          addToCart(productId: ID, qty: Int): Cart
          checkout(cartId: ID): Order
        }
    output: |
      **Schema Design:**

      ```graphql
      # Queries
      type Query {
        products(
          filter: ProductFilter
          sort: ProductSort
          first: Int = 20
          after: String
        ): ProductConnection!

        product(id: ID!): Product

        cart(id: ID!): Cart
      }

      # Mutations
      type Mutation {
        addToCart(input: AddToCartInput!): AddToCartPayload!
        removeFromCart(input: RemoveFromCartInput!): RemoveFromCartPayload!
        updateCartItem(input: UpdateCartItemInput!): UpdateCartItemPayload!
        checkout(input: CheckoutInput!): CheckoutPayload!
      }

      # Types
      type Product {
        id: ID!
        name: String!
        description: String
        price: Money!
        images: [Image!]!
        inStock: Boolean!
        inventory: Int!
      }

      type ProductConnection {
        edges: [ProductEdge!]!
        pageInfo: PageInfo!
        totalCount: Int!
      }

      type ProductEdge {
        node: Product!
        cursor: String!
      }

      # Input types
      input ProductFilter {
        category: String
        priceMin: Float
        priceMax: Float
        inStockOnly: Boolean
      }

      input AddToCartInput {
        cartId: ID
        productId: ID!
        quantity: Int! @constraint(min: 1, max: 99)
      }

      # Payload types (return errors + data)
      type AddToCartPayload {
        cart: Cart
        errors: [UserError!]
      }

      type UserError {
        field: String
        message: String!
      }
      ```

      **Key Improvements:**
      - **Pagination**: Use Connection pattern (Relay spec) for scalability
      - **Input types**: Dedicated input types for all mutations (not inline args)
      - **Non-nullable**: Use `!` for required fields, avoid overuse
      - **Payload pattern**: Return both data and errors from mutations
      - **Filtering**: Structured filter input instead of many arguments
      - **Validation**: Use directives like `@constraint` for input validation

      **Security Recommendations:**
      - **Query Complexity**: Limit query depth (max 5 levels) and breadth
      - **Rate Limiting**:
        - Anonymous users: 100 queries per 15 min
        - Authenticated: 1000 queries per 15 min
        - Mutations: 50 per 15 min per user
      - **Field-level auth**: Sensitive fields (profit margin, supplier info) require admin role
      - **Input validation**: Quantity limits, price validation, cart size limits
      - **Caching**: Implement DataLoader to prevent N+1 queries

      **Versioning Strategy:**
      GraphQL allows gradual evolution without versions:
      - Add new fields (non-breaking)
      - Deprecate old fields with `@deprecated` directive
      - Never remove fields without deprecation period (6+ months)
      - Use schema stitching for major rewrites

      **Sample Query/Response:**

      ```graphql
      query GetProducts {
        products(
          filter: { category: "electronics", inStockOnly: true }
          first: 10
        ) {
          edges {
            node {
              id
              name
              price {
                amount
                currency
              }
              inStock
            }
          }
          pageInfo {
            hasNextPage
            endCursor
          }
        }
      }

      Response:
      {
        "data": {
          "products": {
            "edges": [
              {
                "node": {
                  "id": "prod_123",
                  "name": "Wireless Headphones",
                  "price": {
                    "amount": 99.99,
                    "currency": "USD"
                  },
                  "inStock": true
                }
              }
            ],
            "pageInfo": {
              "hasNextPage": true,
              "endCursor": "Y3Vyc29yOnYyOpK5"
            }
          }
        }
      }
      ```

      **Red Flags:**
      - ⚠️ Missing error handling in checkout (payment failures, inventory issues)
      - ⚠️ Cart should have expiration policy (abandoned carts)
      - ⚠️ Consider optimistic locking for inventory (prevent overselling)
      - ⚠️ Add subscription for real-time cart updates (multi-device support)

metadata:
  author: codewizwit
  license: MIT
  tags:
    - architecture
    - api-design
    - rest
    - graphql
    - best-practices
    - security
  lastUpdated: '2025-10-15'
