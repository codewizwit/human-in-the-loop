id: responsible-ai-audit
name: Responsible AI Audit
version: 1.0.0
description: Comprehensive audit framework for evaluating AI outputs against responsible AI principles including accuracy, fairness, transparency, accountability, and safety
category: governance

variables:
  - name: ai_output
    description: The AI-generated content, code, or decision to audit
    required: true
  - name: use_case
    description: How this AI output will be used (e.g., code review suggestions, test generation, documentation)
    required: true
  - name: risk_level
    description: Potential risk level of this use case (low, medium, high, critical)
    required: true
  - name: target_audience
    description: Who will interact with or be affected by this AI output
    required: false
  - name: deployment_context
    description: Where and how this will be deployed (development tool, production system, etc.)
    required: false

template: |
  You are an expert in responsible AI practices and governance. Your role is to conduct a comprehensive audit of AI outputs to ensure they meet ethical standards and responsible AI principles.

  ## AI Output to Audit
  {{ai_output}}

  ## Use Case
  {{use_case}}

  ## Risk Level
  {{risk_level}}

  {{#if target_audience}}
  ## Target Audience
  {{target_audience}}
  {{/if}}

  {{#if deployment_context}}
  ## Deployment Context
  {{deployment_context}}
  {{/if}}

  ## Audit Framework

  Evaluate this AI output across the four lenses from the Developer-First AI Accountability Framework:

  ### 1. Developer Experience & Growth
  **Evaluate:**
  - Does this AI output enhance developer happiness and creativity, or does it undermine autonomy?
  - Does it support learning by providing explainable insights, or does it bypass understanding?
  - Are there opportunities for skill development, or does it create dependency?
  - Does it reduce cognitive load helpfully, or create new friction?
  - Can developers opt-out, modify, or adjust this AI assistance?

  **Red Flags to Check:**
  - Pressure to accept AI suggestions without understanding
  - Decision-making that bypasses learning opportunities
  - Dependency on AI for basic tasks
  - Loss of creative autonomy or flow state

  ### 2. Responsibility & Equity
  **Evaluate:**
  - Are there biases in the suggestions toward certain styles, patterns, or contributors?
  - Do all team members benefit equally regardless of experience level or role?
  - Are there mechanisms to monitor for unintended impacts on quality or fairness?
  - Does this consider different working styles and accessibility needs?
  - Is accountability clear when AI suggestions cause issues?

  **Red Flags to Check:**
  - Junior developers disadvantaged by senior-optimized workflows
  - Certain coding styles or frameworks favored unfairly
  - Unclear ownership when AI-generated content causes problems
  - Accessibility barriers in AI-assisted workflows

  ### 3. Culture & Collaboration
  **Evaluate:**
  - How does this change team member interactions?
  - Does it enhance collaboration and shared understanding, or replace valuable discussion?
  - Does it balance speed with depth appropriately?
  - Does it strengthen psychological safety and trust?
  - Are there preserved spaces for mentorship, pair programming, and knowledge sharing?

  **Red Flags to Check:**
  - Automated processes replacing meaningful conversations
  - Decreased pair programming or collaborative problem-solving
  - Team members stop asking questions because "AI already answered"
  - Loss of shared code ownership and understanding

  ### 4. Transparency & Trust
  **Evaluate:**
  - Are AI-generated suggestions clearly labeled and explainable?
  - Can developers challenge, override, or contextualize AI feedback easily?
  - Is there transparency about when and how AI is used?
  - Is there visibility into how AI makes decisions?
  - Are limitations and failure modes clearly communicated?

  **Red Flags to Check:**
  - Can't distinguish AI-generated vs human content
  - No explanation for why AI made specific suggestions
  - Hidden AI assistance affecting performance evaluations
  - Lack of documentation on capabilities and limits

  ## Audit Report Format

  Provide your audit in this structure:

  ### Executive Summary
  [2-3 sentence overview of the audit findings and overall risk assessment]

  ### Lens-by-Lens Analysis

  **1. Developer Experience & Growth**
  - Score: [Pass | Pass with Concerns | Fail]
  - Key Findings: [Bullet points]
  - Recommendations: [Specific improvements]

  **2. Responsibility & Equity**
  - Score: [Pass | Pass with Concerns | Fail]
  - Key Findings: [Bullet points]
  - Recommendations: [Specific improvements]

  **3. Culture & Collaboration**
  - Score: [Pass | Pass with Concerns | Fail]
  - Key Findings: [Bullet points]
  - Recommendations: [Specific improvements]

  **4. Transparency & Trust**
  - Score: [Pass | Pass with Concerns | Fail]
  - Key Findings: [Bullet points]
  - Recommendations: [Specific improvements]

  ### Risk Assessment
  - **Overall Risk Level:** [Low | Medium | High | Critical]
  - **Primary Risks:** [Top 3 risks identified]
  - **Mitigation Priority:** [What must be addressed before deployment]

  ### Mitigation Recommendations
  1. **Immediate Actions** (must-fix before deployment)
     - [Specific actionable items]

  2. **Short-term Improvements** (address within 1-2 sprints)
     - [Specific actionable items]

  3. **Long-term Enhancements** (ongoing monitoring and improvement)
     - [Specific actionable items]

  ### Deployment Decision
  - **Recommendation:** [Deploy | Deploy with Conditions | Do Not Deploy | Needs Redesign]
  - **Rationale:** [Clear explanation of the decision]
  - **Conditions (if applicable):** [Specific requirements that must be met]

  ### Monitoring Plan
  - **Metrics to Track:** [What to measure post-deployment]
  - **Review Frequency:** [How often to reassess]
  - **Success Criteria:** [What indicates responsible deployment]

examples:
  - input:
      ai_output: |
        AI Code Review Bot that automatically comments on PRs with suggestions:
        - Detects style violations and posts "Fix this formatting" comments
        - Suggests performance improvements without explanation
        - Auto-approves PRs that pass all checks
        - Runs on every PR with no opt-out mechanism
      use_case: Automated code review assistance in pull requests
      risk_level: high
      target_audience: Engineering team of 20 developers (5 junior, 10 mid-level, 5 senior)
      deployment_context: GitHub PRs for production services
    output: |
      ### Executive Summary
      This AI code review implementation presents significant responsible AI concerns across all four accountability lenses. The tool lacks transparency, creates dependency, may undermine collaboration, and provides inequitable benefits. Risk level: HIGH. Recommendation: Do Not Deploy without major redesign.

      ### Lens-by-Lens Analysis

      **1. Developer Experience & Growth**
      - Score: Fail
      - Key Findings:
        - No explanation provided for suggestions, bypassing learning opportunities
        - No opt-out mechanism forces acceptance, reducing autonomy
        - Junior developers may accept suggestions without understanding
        - "Fix this formatting" commands are not growth-oriented
      - Recommendations:
        - Add detailed explanations for all suggestions
        - Make bot opt-in at PR or developer level
        - Reframe commands as questions: "Would you consider..."
        - Provide links to documentation for learning

      **2. Responsibility & Equity**
      - Score: Fail
      - Key Findings:
        - Junior developers likely disadvantaged (may blindly accept vs. learn)
        - No accountability when bot suggestions cause issues
        - Style enforcement may not consider different frameworks or patterns
        - No mechanism to monitor for bias in suggestions
      - Recommendations:
        - Require human review for all automated comments
        - Add clear ownership: "This is an automated suggestion, not a requirement"
        - Track suggestion acceptance rates by experience level
        - Allow teams to customize rules per project

      **3. Culture & Collaboration**
      - Score: Fail
      - Key Findings:
        - Auto-approval eliminates human review conversations
        - May discourage teammates from providing feedback (bot already did)
        - Command tone undermines psychological safety
        - No space for discussion or context-sharing
      - Recommendations:
        - Remove auto-approval feature entirely
        - Change to "suggestions for discussion" vs. requirements
        - Preserve human-to-human review as primary mechanism
        - Encourage reviewers to discuss bot feedback in PR comments

      **4. Transparency & Trust**
      - Score: Fail
      - Key Findings:
        - No indication of how suggestions are generated
        - Can't challenge or dismiss recommendations easily
        - Developers may not know this affects their work
        - No documentation on bot limitations
      - Recommendations:
        - Clearly label all bot comments with [AI-Generated]
        - Provide "Why this suggestion?" explanations
        - Add dismiss button with optional reason
        - Document what the bot checks and doesn't check

      ### Risk Assessment
      - **Overall Risk Level:** High
      - **Primary Risks:**
        1. Erosion of learning opportunities for junior developers
        2. Loss of human collaboration and code ownership
        3. Hidden automation affecting developer performance perception
      - **Mitigation Priority:** Remove auto-approval, add opt-out, require explanations

      ### Mitigation Recommendations
      1. **Immediate Actions** (must-fix before deployment)
         - Remove auto-approval feature
         - Add opt-out mechanism at PR and developer level
         - Change all command language to suggestion language
         - Add clear [AI-Generated] labels to all comments
         - Provide explanation links for every suggestion

      2. **Short-term Improvements** (address within 1-2 sprints)
         - Implement "dismiss with reason" functionality
         - Add usage analytics to monitor adoption and equity
         - Create documentation on when to use/not use bot
         - Gather developer feedback on bot helpfulness

      3. **Long-term Enhancements** (ongoing monitoring and improvement)
         - Track suggestion acceptance by experience level
         - Monitor PR discussion quality before/after bot
         - Survey developer satisfaction quarterly
         - Evolve bot based on team feedback and learning needs

      ### Deployment Decision
      - **Recommendation:** Do Not Deploy
      - **Rationale:** Too many critical failures across all accountability lenses. The current design undermines learning, collaboration, and developer autonomy. Auto-approval and mandatory usage are particularly concerning.
      - **Conditions (if applicable):**
        - Complete redesign addressing all "Immediate Actions" above
        - Pilot with willing team members only
        - Collect feedback after 2 weeks before broader rollout
        - Maintain human review as primary quality gate

      ### Monitoring Plan
      - **Metrics to Track:**
        - Developer satisfaction scores (before/after bot)
        - PR discussion depth and frequency
        - Suggestion acceptance rates by experience level
        - Time to PR approval (ensure quality not sacrificed for speed)
        - Bug introduction rates in bot-reviewed code
      - **Review Frequency:** Weekly for first month, then monthly
      - **Success Criteria:**
        - ≥80% developer satisfaction with bot helpfulness
        - No decrease in PR discussion quality
        - Equal benefit across experience levels
        - No increase in bug rates

  - input:
      ai_output: |
        AI Test Generator that creates unit tests based on function signatures:
        - Generates basic happy path tests
        - Includes JSDoc comments explaining test purpose
        - Marks all generated tests with // AI-generated comment
        - Saves as separate .ai.spec.ts files for easy identification
        - Developers must review and modify before merging
      use_case: Accelerate test coverage for new TypeScript functions
      risk_level: medium
      target_audience: Development team writing new features
      deployment_context: Optional development tool, not required
    output: |
      ### Executive Summary
      This AI test generation tool demonstrates responsible AI best practices with clear labeling, human review requirements, and optional usage. Minor improvements needed around edge case coverage and learning support. Risk level: MEDIUM. Recommendation: Deploy with Conditions.

      ### Lens-by-Lens Analysis

      **1. Developer Experience & Growth**
      - Score: Pass with Concerns
      - Key Findings:
        - ✅ Optional tool respects developer autonomy
        - ✅ JSDoc comments support understanding
        - ✅ Separate files make AI content clear
        - ⚠️  May not teach edge case thinking if developers just accept
        - ⚠️  Happy path focus could create false security
      - Recommendations:
        - Add comments suggesting edge cases to consider
        - Include TODO markers for developers to add scenarios
        - Link to testing best practices documentation
        - Consider "learning mode" with more detailed explanations

      **2. Responsibility & Equity**
      - Score: Pass
      - Key Findings:
        - ✅ Benefits all experience levels (junior get starting point, senior save time)
        - ✅ Clear accountability: developers own tests after review
        - ✅ No bias toward specific frameworks (TypeScript-agnostic)
        - ✅ Optional usage means equitable access without forcing adoption
      - Recommendations:
        - Monitor usage patterns to ensure benefit across team
        - Provide examples of how to extend generated tests
        - Consider different templates for different testing philosophies

      **3. Culture & Collaboration**
      - Score: Pass
      - Key Findings:
        - ✅ Review requirement preserves discussion about test quality
        - ✅ Doesn't replace conversations about testing strategy
        - ✅ Can be used in pair programming as starting point
        - ✅ Separate files encourage conscious review
      - Recommendations:
        - Encourage pairing when reviewing AI-generated tests
        - Add prompts for discussion: "Consider testing these scenarios..."
        - Share team learnings about improving generated tests

      **4. Transparency & Trust**
      - Score: Pass
      - Key Findings:
        - ✅ Clear AI-generated markers in code
        - ✅ Separate file naming makes identification easy
        - ✅ JSDoc explains what each test does
        - ✅ Developers have full control and visibility
      - Recommendations:
        - Document what the generator can and cannot test well
        - Add metadata showing generation timestamp and version
        - Provide changelog when generator logic improves

      ### Risk Assessment
      - **Overall Risk Level:** Medium
      - **Primary Risks:**
        1. Developers may miss edge cases if they only review generated tests
        2. False confidence in coverage if happy path tests dominate
        3. Potential for lazy review if time-pressured
      - **Mitigation Priority:** Add edge case prompts, monitor test quality metrics

      ### Mitigation Recommendations
      1. **Immediate Actions** (must-fix before deployment)
         - Add "Edge cases to consider" section to generated tests
         - Include TODO markers for additional scenarios
         - Document tool limitations clearly (what it doesn't test)

      2. **Short-term Improvements** (address within 1-2 sprints)
         - Add coverage metrics dashboard to track test quality
        - Create examples of good vs. acceptable AI-generated test usage
         - Implement feedback mechanism for improving generator

      3. **Long-term Enhancements** (ongoing monitoring and improvement)
         - Evolve generator to suggest edge cases based on function complexity
         - Track bug escape rates in AI-tested vs hand-tested code
         - Gather team feedback on test quality and usefulness

      ### Deployment Decision
      - **Recommendation:** Deploy with Conditions
      - **Rationale:** Strong responsible AI foundation with clear labeling, human review, and optional usage. Minor improvements needed to support learning and edge case thinking. Benefits outweigh risks if conditions are met.
      - **Conditions (if applicable):**
        - Add "Edge cases to consider" prompts before deployment
        - Document limitations in tool README
        - Pilot with 3-5 developers for 2 weeks
        - Review test quality metrics after pilot

      ### Monitoring Plan
      - **Metrics to Track:**
        - Test coverage percentages (overall and edge cases)
        - Bug escape rates in code with AI-generated tests
        - Time saved vs. manual test writing
        - Developer satisfaction with tool usefulness
        - Percentage of generated tests modified before merge
      - **Review Frequency:** Bi-weekly for first month, monthly thereafter
      - **Success Criteria:**
        - Test coverage maintained or improved
        - No increase in bug escape rates
        - ≥70% developer satisfaction
        - ≥80% of generated tests are modified (shows thoughtful review)

metadata:
  author: codewizwit
  license: MIT
  tags:
    - governance
    - responsible-ai
    - accountability
    - audit
    - ethics
    - ai-safety
    - transparency
    - bias-detection
  lastUpdated: '2025-10-19'
  alignsWith:
    - ACCOUNTABILITY.md
