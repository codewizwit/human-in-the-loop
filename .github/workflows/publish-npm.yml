name: Release and Publish

on:
  push:
    branches: [main]

jobs:
  release:
    runs-on: ubuntu-latest
    environment: production
    permissions:
      contents: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: pnpm/action-setup@v3
        with:
          version: 9

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check if should skip release
        id: should_release
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)

          # Skip if this is already a release commit (avoid infinite loop)
          if [[ "$COMMIT_MSG" =~ ^chore\(release\): ]]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "ℹ️  Skipping - already a release commit"
          else
            # Use Nx affected to check if CLI project is affected
            AFFECTED=$(npx nx show projects --affected --base=HEAD~1 --head=HEAD)

            if echo "$AFFECTED" | grep -q "cli"; then
              echo "skip=false" >> $GITHUB_OUTPUT
              echo "✅ CLI project is affected, proceeding with release"
              echo "Affected projects: $AFFECTED"
            else
              echo "skip=true" >> $GITHUB_OUTPUT
              echo "ℹ️  CLI project not affected, skipping release"
              echo "Affected projects: $AFFECTED"
            fi
          fi

      - name: Run tests (pre-release)
        if: steps.should_release.outputs.skip == 'false'
        run: |
          pnpm lint
          pnpm typecheck
          pnpm test

      - name: Configure git
        if: steps.should_release.outputs.skip == 'false'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Bump version and create tag
        if: steps.should_release.outputs.skip == 'false'
        id: version_bump
        run: |
          # Run standard-version to bump version based on conventional commits
          pnpm release

          # Get the new version
          NEW_VERSION=$(cat src/cli/package.json | grep '"version"' | head -1 | awk -F'"' '{print $4}')
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "📦 Version bumped to: $NEW_VERSION"

      - name: Build with new version
        if: steps.should_release.outputs.skip == 'false'
        run: pnpm build

      - name: Push version bump and tags
        if: steps.should_release.outputs.skip == 'false'
        run: |
          git push --follow-tags origin main

      - name: Publish to npm
        if: steps.should_release.outputs.skip == 'false'
        run: cd dist/src/cli && npm publish --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub release
        if: steps.should_release.outputs.skip == 'false'
        run: |
          VERSION="${{ steps.version_bump.outputs.version }}"

          # Extract release notes from CHANGELOG.md for this version
          NOTES=$(sed -n "/^### \[$VERSION\]/,/^### \[/p" CHANGELOG.md | sed '$ d' | tail -n +3)

          # Fallback to commit history if CHANGELOG extraction fails
          if [ -z "$NOTES" ]; then
            LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
            NOTES=$([ -z "$LAST_TAG" ] && git log --pretty=format:"- %s (%h)" --no-merges -10 || git log $LAST_TAG..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi

          gh release create "v$VERSION" \
            --title "v$VERSION" \
            --notes "## Release v$VERSION

          $NOTES

          **Install:** \`npm i -g @human-in-the-loop/cli@$VERSION\`"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
